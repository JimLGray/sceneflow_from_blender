diff --git a/intern/cycles/kernel/geom/geom_primitive.h b/intern/cycles/kernel/geom/geom_primitive.h
index 9a91da79f58..9e66f41885d 100644
--- a/intern/cycles/kernel/geom/geom_primitive.h
+++ b/intern/cycles/kernel/geom/geom_primitive.h
@@ -373,14 +373,21 @@ ccl_device_inline float4 primitive_motion_vector(KernelGlobals *kg, ShaderData *
   /* camera motion, for perspective/orthographic motion.pre/post will be a
    * world-to-raster matrix, for panorama it's world-to-camera */
   if (kernel_data.cam.type != CAMERA_PANORAMA) {
-    ProjectionTransform projection = kernel_data.cam.worldtoraster;
-    motion_center = transform_perspective(&projection, center);
+    //ProjectionTransform projection = kernel_data.cam.worldtoraster;
+    //motion_center = transform_perspective(&projection, center);
 
-    projection = kernel_data.cam.perspective_pre;
-    motion_pre = transform_perspective(&projection, motion_pre);
+    //projection = kernel_data.cam.perspective_pre;
+    //motion_pre = transform_perspective(&projection, motion_pre);
+    tfm = kernel_data.cam.motion_pass_pre;
+    motion_pre = transform_point(&tfm, motion_pre);
+
+    tfm = kernel_data.cam.worldtocamera;
+    motion_center = transform_point(&tfm, center);
 
-    projection = kernel_data.cam.perspective_post;
-    motion_post = transform_perspective(&projection, motion_post);
+    //projection = kernel_data.cam.perspective_post;
+    //motion_post = transform_perspective(&projection, motion_post);
+    tfm = kernel_data.cam.motion_pass_post;
+    motion_post = transform_point(&tfm, motion_post);
   }
   else {
     tfm = kernel_data.cam.worldtocamera;
@@ -402,10 +409,10 @@ ccl_device_inline float4 primitive_motion_vector(KernelGlobals *kg, ShaderData *
     motion_post.y *= kernel_data.cam.height;
   }
 
-  motion_pre = motion_pre - motion_center;
+  motion_pre =  motion_center - motion_pre;
   motion_post = motion_center - motion_post;
 
-  return make_float4(motion_pre.x, motion_pre.y, motion_post.x, motion_post.y);
+  return make_float4(motion_pre.x, motion_pre.y, motion_pre.z, 0);
 }
 
 CCL_NAMESPACE_END
diff --git a/intern/cycles/render/camera.cpp b/intern/cycles/render/camera.cpp
index 74953afae9d..1bcf89b4b3c 100644
--- a/intern/cycles/render/camera.cpp
+++ b/intern/cycles/render/camera.cpp
@@ -350,10 +350,14 @@ void Camera::update(Scene *scene)
       if (have_motion) {
         kcam->perspective_pre = cameratoraster * transform_inverse(motion[0]);
         kcam->perspective_post = cameratoraster * transform_inverse(motion[motion.size() - 1]);
+        kcam->motion_pass_pre = transform_inverse(motion[0]);
+        kcam->motion_pass_post = transform_inverse(motion[motion.size() - 1]);
       }
       else {
         kcam->perspective_pre = worldtoraster;
         kcam->perspective_post = worldtoraster;
+        kcam->motion_pass_pre = kcam->worldtocamera;
+        kcam->motion_pass_post = kcam->worldtocamera;
       }
     }
   }
